<?php

declare(strict_types=1);

namespace Pest\Support;

use BackedEnum;
use SebastianBergmann\RecursionContext\Context;
use UnitEnum;

final class Exporter extends \SebastianBergmann\Exporter\Exporter
{
    protected function recursiveExport(&$value, $indentation, $processed = null)
    {
        if (version_compare('8.1.0', PHP_VERSION, '>')) {
            return parent::recursiveExport($value, $indentation, $processed); // TODO: Change the autogenerated stub
        }

        if ($value instanceof BackedEnum) {
            return sprintf(
                '%s Enum #%d (%s, %s)',
                get_class($value),
                spl_object_id($value),
                $value->name,
                $this->export($value->value, $indentation)
            );
        }

        if ($value instanceof UnitEnum) {
            return sprintf(
                '%s Enum #%d (%s)',
                get_class($value),
                spl_object_id($value),
                $value->name
            );
        }

        return parent::recursiveExport($value, $indentation, $processed);
    }

    /**
     * @param array<mixed> $data
     * @param Context      $context
     *
     * @return string
     */
    public function shortenedRecursiveExport(&$data, Context $context = null)
    {
        $result   = [];
        $exporter = new self();

        if ($context === null) {
            $context = new Context();
        }

        $array = $data;
        $context->add($data);

        foreach ($array as $key => $value) {
            if (is_array($value)) {
                if ($context->contains($data[$key]) !== false) {
                    $result[] = '*RECURSION*';
                } else {
                    $result[] = sprintf(
                        'array(%s)',
                        $this->shortenedRecursiveExport($data[$key], $context)
                    );
                }
            } else {
                $result[] = $exporter->shortenedExport($value);
            }
        }

        return implode(', ', $result);
    }

    /**
     * @param mixed $value
     *
     * @return string
     */
    public function shortenedExport($value)
    {
        if (version_compare('8.1.0', PHP_VERSION, '>')) {
            return parent::shortenedExport($value);
        }

        if ($value instanceof BackedEnum) {
            return sprintf(
                '%s Enum (%s, %s)',
                get_class($value),
                $value->name,
                $this->export($value->value)
            );
        }

        if ($value instanceof UnitEnum) {
            return sprintf(
                '%s Enum (%s)',
                get_class($value),
                $value->name
            );
        }

        return parent::shortenedExport($value);
    }
}
